#!/usr/bin/env python3
import argparse
import inspect
import os
import tpm2_pytss
import sys
import textwrap
from tpm2_pytss.types import TPM2B_SIMPLE_OBJECT


def get_subclasses(base_class, package):
    subclasses = []
    for _, obj in inspect.getmembers(package):
        if inspect.isclass(obj) and issubclass(obj, base_class) and obj != base_class:
            subclasses.append(obj)
    return subclasses


def print_tpm2b_test_protos(s):
    name = s.__name__
    t = textwrap.dedent(
        f"""
        void
        test_{name}_good(void **state);
        
        void
        test_{name}_zero(void **state);
        
        void
        test_{name}_null(void **state);
        """
    )
    sys.stdout.write(t)


def print_tpm2b_tests(s):
    x = s()
    attrs = dir(x._cdata)
    attrs.remove("size")
    assert len(attrs) == 1
    name = s.__name__
    field = attrs[0]

    # I was hoping to get the data type size, but no luck
    # just make it 16, that fits inside everything like
    # TPM2B_IV
    size = 16
    raw_bytes = os.urandom(size)
    hex_list = ", ".join([f"0x{byte:02x}" for byte in raw_bytes])
    w = textwrap.wrap(hex_list, 88)
    hex_list = "\n                    ".join(w)

    hex_str = raw_bytes.hex()
    w = textwrap.wrap(hex_str, 88)
    w = [f'"{x}"' for x in w]
    hex_str = "\n                ".join(w)

    t = textwrap.dedent(
        f"""
        void
        test_{name}_good(void **state)
        {{
            UNUSED(state);
        
            static const {name} src = {{
                .size = {size},
                .{field} = {{
                    {hex_list}
                }}
            }};
        
            TEST_COMMON_GOOD({name}, {field},
                {hex_str.strip()},
                src);
        }}
        
        void
        test_{name}_zero(void **state)
        {{
            UNUSED(state);
        
            TEST_COMMON_ZERO({name}, {field});
        }}
        
        void
        test_{name}_null(void **state)
        {{
            TEST_COMMON_NULL({name}, {field});
        }}
    """
    )

    sys.stdout.write(t)


def print_tpm2b_protos(s):
    name = s.__name__

    t = textwrap.dedent(
        f"""
        TSS2_RC
        Tss2_MU_YAML_{name}_Marshal(
            {name} const *src,
            char            **output);
        
        TSS2_RC
        Tss2_MU_YAML_{name}_Unmarshal(
            char const      buffer[],
            size_t          buffer_size,
            {name}   *dest);
    """
    )

    sys.stdout.write(t)


def print_tpm2b_test_list(s):
    name = s.__name__
    print(f"cmocka_unit_test(test_{name}_good),")
    print(f"cmocka_unit_test(test_{name}_zero),")
    print(f"cmocka_unit_test(test_{name}_null),")


def print_tpm2b_defines(s):
    x = s()
    attrs = dir(x._cdata)
    attrs.remove("size")
    assert len(attrs) == 1
    name = s.__name__
    field = attrs[0]
    print(f"SIMPLE_TPM2B_MARSHAL({name}, {field})")
    print(f"SIMPLE_TPM2B_UNMARSHAL({name}, {field})")


if __name__ == "__main__":
    choices = [
        "tpm2b_defines",
        "tpm2b_protos",
        "tpm2b_tests",
        "tpm2b_test_protos",
        "tpm2b_test_list",
    ]

    parser = argparse.ArgumentParser(description="Your script description")
    parser.add_argument(
        "action", choices=choices, help="Choose one option from {}".format(choices)
    )
    args = parser.parse_args()

    action = args.action
    fn = globals()[f"print_{action}"]

    subclasses = get_subclasses(TPM2B_SIMPLE_OBJECT, package=tpm2_pytss)

    print(
        f"/* AUTOGENERATED ASSISTED CODE using yaml_mu_gen.py {sys.argv[1]}. modify with care */"
    )
    for s in subclasses:
        fn(s)
