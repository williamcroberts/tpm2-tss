/* SPDX-License-Identifier: BSD-2-Clause */

#ifndef INCLUDE_TSS2_TSS2_MU_YAML_H_
#define INCLUDE_TSS2_TSS2_MU_YAML_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "tss2_tpm2_types.h"

/* AUTOGENERATED ASSISTED CODE using yaml_mu_gen.py tpm2b_protos. modify with care */

TSS2_RC
Tss2_MU_YAML_TPM2B_ATTEST_Marshal(
    TPM2B_ATTEST const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_ATTEST_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_ATTEST   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_AUTH_Marshal(
    TPM2B_AUTH const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_AUTH_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_AUTH   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_CONTEXT_DATA_Marshal(
    TPM2B_CONTEXT_DATA const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_CONTEXT_DATA_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_CONTEXT_DATA   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_CONTEXT_SENSITIVE_Marshal(
    TPM2B_CONTEXT_SENSITIVE const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_CONTEXT_SENSITIVE_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_CONTEXT_SENSITIVE   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_DATA_Marshal(
    TPM2B_DATA const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_DATA_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_DATA   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_DIGEST_Marshal(
    TPM2B_DIGEST const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_DIGEST_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_DIGEST   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_ECC_PARAMETER_Marshal(
    TPM2B_ECC_PARAMETER const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_ECC_PARAMETER_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_ECC_PARAMETER   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_ENCRYPTED_SECRET_Marshal(
    TPM2B_ENCRYPTED_SECRET const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_ENCRYPTED_SECRET_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_ENCRYPTED_SECRET   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_EVENT_Marshal(
    TPM2B_EVENT const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_EVENT_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_EVENT   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_ID_OBJECT_Marshal(
    TPM2B_ID_OBJECT const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_ID_OBJECT_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_ID_OBJECT   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_IV_Marshal(
    TPM2B_IV const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_IV_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_IV   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_MAX_BUFFER_Marshal(
    TPM2B_MAX_BUFFER const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_MAX_BUFFER_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_MAX_BUFFER   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_MAX_NV_BUFFER_Marshal(
    TPM2B_MAX_NV_BUFFER const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_MAX_NV_BUFFER_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_MAX_NV_BUFFER   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_NAME_Marshal(
    TPM2B_NAME const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_NAME_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_NAME   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_NONCE_Marshal(
    TPM2B_NONCE const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_NONCE_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_NONCE   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_OPERAND_Marshal(
    TPM2B_OPERAND const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_OPERAND_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_OPERAND   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_PRIVATE_Marshal(
    TPM2B_PRIVATE const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_PRIVATE_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_PRIVATE   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_PRIVATE_KEY_RSA_Marshal(
    TPM2B_PRIVATE_KEY_RSA const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_PRIVATE_KEY_RSA_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_PRIVATE_KEY_RSA   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_PRIVATE_VENDOR_SPECIFIC_Marshal(
    TPM2B_PRIVATE_VENDOR_SPECIFIC const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_PRIVATE_VENDOR_SPECIFIC_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_PRIVATE_VENDOR_SPECIFIC   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_PUBLIC_KEY_RSA_Marshal(
    TPM2B_PUBLIC_KEY_RSA const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_PUBLIC_KEY_RSA_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_PUBLIC_KEY_RSA   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_SENSITIVE_DATA_Marshal(
    TPM2B_SENSITIVE_DATA const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_SENSITIVE_DATA_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_SENSITIVE_DATA   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_SYM_KEY_Marshal(
    TPM2B_SYM_KEY const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_SYM_KEY_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_SYM_KEY   *dest);

TSS2_RC
Tss2_MU_YAML_TPM2B_TEMPLATE_Marshal(
    TPM2B_TEMPLATE const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPM2B_TEMPLATE_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPM2B_TEMPLATE   *dest);

/* AUTOGENERATED ASSISTED CODE using yaml_mu_gen.py tpms_protos. modify with care */

TSS2_RC
Tss2_MU_YAML_TPMS_AC_OUTPUT_Marshal(
    TPMS_AC_OUTPUT const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_AC_OUTPUT_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_AC_OUTPUT   *dest);

// TODO BILL?
//TSS2_RC
//Tss2_MU_YAML_TPMS_ALGORITHM_DESCRIPTION_Marshal(
//    TPMS_ALGORITHM_DESCRIPTION const *src,
//    char            **output);
//
//TSS2_RC
//Tss2_MU_YAML_TPMS_ALGORITHM_DESCRIPTION_Unmarshal(
//    char const      buffer[],
//    size_t          buffer_size,
//    TPMS_ALGORITHM_DESCRIPTION   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_ALGORITHM_DETAIL_ECC_Marshal(
    TPMS_ALGORITHM_DETAIL_ECC const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_ALGORITHM_DETAIL_ECC_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_ALGORITHM_DETAIL_ECC   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_ALG_PROPERTY_Marshal(
    TPMS_ALG_PROPERTY const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_ALG_PROPERTY_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_ALG_PROPERTY   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_ASYM_PARMS_Marshal(
    TPMS_ASYM_PARMS const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_ASYM_PARMS_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_ASYM_PARMS   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_ATTEST_Marshal(
    TPMS_ATTEST const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_ATTEST_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_ATTEST   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_AUTH_COMMAND_Marshal(
    TPMS_AUTH_COMMAND const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_AUTH_COMMAND_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_AUTH_COMMAND   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_AUTH_RESPONSE_Marshal(
    TPMS_AUTH_RESPONSE const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_AUTH_RESPONSE_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_AUTH_RESPONSE   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_CAPABILITY_DATA_Marshal(
    TPMS_CAPABILITY_DATA const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_CAPABILITY_DATA_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_CAPABILITY_DATA   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_CERTIFY_INFO_Marshal(
    TPMS_CERTIFY_INFO const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_CERTIFY_INFO_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_CERTIFY_INFO   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_CLOCK_INFO_Marshal(
    TPMS_CLOCK_INFO const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_CLOCK_INFO_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_CLOCK_INFO   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_COMMAND_AUDIT_INFO_Marshal(
    TPMS_COMMAND_AUDIT_INFO const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_COMMAND_AUDIT_INFO_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_COMMAND_AUDIT_INFO   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_CONTEXT_Marshal(
    TPMS_CONTEXT const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_CONTEXT_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_CONTEXT   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_CONTEXT_DATA_Marshal(
    TPMS_CONTEXT_DATA const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_CONTEXT_DATA_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_CONTEXT_DATA   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_CREATION_DATA_Marshal(
    TPMS_CREATION_DATA const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_CREATION_DATA_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_CREATION_DATA   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_CREATION_INFO_Marshal(
    TPMS_CREATION_INFO const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_CREATION_INFO_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_CREATION_INFO   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_ECC_PARMS_Marshal(
    TPMS_ECC_PARMS const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_ECC_PARMS_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_ECC_PARMS   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_ECC_POINT_Marshal(
    TPMS_ECC_POINT const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_ECC_POINT_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_ECC_POINT   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_EMPTY_Marshal(
    TPMS_EMPTY const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_EMPTY_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_EMPTY   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_ID_OBJECT_Marshal(
    TPMS_ID_OBJECT const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_ID_OBJECT_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_ID_OBJECT   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_KEYEDHASH_PARMS_Marshal(
    TPMS_KEYEDHASH_PARMS const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_KEYEDHASH_PARMS_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_KEYEDHASH_PARMS   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_NV_CERTIFY_INFO_Marshal(
    TPMS_NV_CERTIFY_INFO const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_NV_CERTIFY_INFO_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_NV_CERTIFY_INFO   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_NV_PIN_COUNTER_PARAMETERS_Marshal(
    TPMS_NV_PIN_COUNTER_PARAMETERS const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_NV_PIN_COUNTER_PARAMETERS_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_NV_PIN_COUNTER_PARAMETERS   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_NV_PUBLIC_Marshal(
    TPMS_NV_PUBLIC const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_NV_PUBLIC_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_NV_PUBLIC   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_PCR_SELECT_Marshal(
    TPMS_PCR_SELECT const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_PCR_SELECT_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_PCR_SELECT   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_PCR_SELECTION_Marshal(
    TPMS_PCR_SELECTION const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_PCR_SELECTION_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_PCR_SELECTION   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_QUOTE_INFO_Marshal(
    TPMS_QUOTE_INFO const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_QUOTE_INFO_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_QUOTE_INFO   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_RSA_PARMS_Marshal(
    TPMS_RSA_PARMS const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_RSA_PARMS_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_RSA_PARMS   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_SCHEME_ECDAA_Marshal(
    TPMS_SCHEME_ECDAA const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_SCHEME_ECDAA_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_SCHEME_ECDAA   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_SCHEME_HASH_Marshal(
    TPMS_SCHEME_HASH const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_SCHEME_HASH_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_SCHEME_HASH   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_SCHEME_XOR_Marshal(
    TPMS_SCHEME_XOR const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_SCHEME_XOR_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_SCHEME_XOR   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_SENSITIVE_CREATE_Marshal(
    TPMS_SENSITIVE_CREATE const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_SENSITIVE_CREATE_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_SENSITIVE_CREATE   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_SESSION_AUDIT_INFO_Marshal(
    TPMS_SESSION_AUDIT_INFO const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_SESSION_AUDIT_INFO_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_SESSION_AUDIT_INFO   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_SIGNATURE_ECC_Marshal(
    TPMS_SIGNATURE_ECC const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_SIGNATURE_ECC_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_SIGNATURE_ECC   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_SIGNATURE_RSA_Marshal(
    TPMS_SIGNATURE_RSA const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_SIGNATURE_RSA_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_SIGNATURE_RSA   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_SYMCIPHER_PARMS_Marshal(
    TPMS_SYMCIPHER_PARMS const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_SYMCIPHER_PARMS_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_SYMCIPHER_PARMS   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_TAGGED_PCR_SELECT_Marshal(
    TPMS_TAGGED_PCR_SELECT const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_TAGGED_PCR_SELECT_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_TAGGED_PCR_SELECT   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_TAGGED_PROPERTY_Marshal(
    TPMS_TAGGED_PROPERTY const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_TAGGED_PROPERTY_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_TAGGED_PROPERTY   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_TIME_ATTEST_INFO_Marshal(
    TPMS_TIME_ATTEST_INFO const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_TIME_ATTEST_INFO_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_TIME_ATTEST_INFO   *dest);

TSS2_RC
Tss2_MU_YAML_TPMS_TIME_INFO_Marshal(
    TPMS_TIME_INFO const *src,
    char            **output);

TSS2_RC
Tss2_MU_YAML_TPMS_TIME_INFO_Unmarshal(
    char const      buffer[],
    size_t          buffer_size,
    TPMS_TIME_INFO   *dest);

#ifdef __cplusplus
}
#endif

#endif /* INCLUDE_TSS2_TSS2_MU_YAML_H_ */
